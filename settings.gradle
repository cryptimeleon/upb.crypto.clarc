plugins {
    id 'org.ajoberstar.grgit' version '4.0.2' apply false
}
import org.ajoberstar.grgit.Grgit

rootProject.name = 'clarc'

// do specific snapshot dependency resolution for snapshot builds
def msgPrefix = rootProject.name + " settings: "

// do specific snapshot dependency resolution for snapshot builds
if (!Boolean.valueOf(System.getProperty("disablesnapshot"))) {
    def compositeLibraries = ["upb.crypto.math", "upb.crypto.protocols"]
    for (String lib : compositeLibraries) {
        def libPrefix = "dependency " + lib
        def libPath = file("../" + lib).getPath()
        def grgitLib
        def cloned
        if (file(libPath).exists()) {
            println(msgPrefix + libPrefix + ": Local repository exists.")
            grgitLib = Grgit.open(dir: libPath)
            cloned = false
        } else {
            println(msgPrefix + libPrefix + ": Local repository does not exist. Cloning to " + libPath + ".")
            grgitLib = Grgit.clone(dir: libPath, uri: "https://github.com/upbcuk/" + lib + ".git")
            cloned = true
        }
        def grgitThis = Grgit.open(dir: rootProject.projectDir)
        def branchThis = grgitThis.branch.current()
        if (hasProperty("useCurrentBranch")) {
            println(msgPrefix + libPrefix + ": Parameter 'useCurrentBranch' is set. Using branch '" + grgitLib.branch.current().getName() + "'.")
        } else {
            if (file(libPath + "/.git/refs/heads/" + branchThis.getName()).exists()) {
                if (grgitLib.branch.current().getName() == branchThis.getName()) {
                    println(msgPrefix + libPrefix + ": Branch '" + branchThis.getName() + "' exists and is checked out already.")
                } else {
                    throw new GradleException(msgPrefix + libPrefix + ": Branch '" + branchThis.getName() + "' exists but is not checked out. "
                            + "Please check it out yourself before building.")
                }
            } else {
                println(msgPrefix + libPrefix + ": Branch '" + branchThis.getName() + "' does not exist locally.")
                if (grgitLib.branch.list { mode = "REMOTE" }.collect { it.getName() }.contains("origin/" + branchThis.getName())) {
                    if (hasProperty("checkoutIfCloned") && cloned) {
                        println(msgPrefix + libPrefix + ": Branch '" + branchThis.getName() + "' exists but is not checked out. "
                                + "'checkoutIfCloned' is set. Automatically checking it out.")
                        grgitLib.checkout {
                            branch = branchThis.getName()
                            startPoint = "origin/" + branchThis.getName()
                            createBranch = true
                        }
                    } else {
                        throw new GradleException(msgPrefix + libPrefix + ": Branch '" + branchThis.getName()
                                + "' exists remotely but not locally. Please check it out yourself before building.")
                    }
                } else {
                    println(msgPrefix + libPrefix + ": Branch '" + branchThis.getName() + "' does not exist remotely. Using master.")
                    if (grgitLib.branch.current().getName() == "master") {
                        println(msgPrefix + libPrefix + ": Branch master is checked out already. Using it.")
                    } else {
                        if (hasProperty("checkoutIfCloned") && cloned) {
                            println(msgPrefix + libPrefix + ": Branch master is not checked out. "
                                    + "'checkoutIfCloned' is set. Automatically checking it out.")
                            grgitLib.checkout {
                                branch = branchThis.getName()
                                startPoint = "origin/" + branchThis.getName()
                                createBranch = true
                            }
                        } else {
                            throw new GradleException(msgPrefix + libPrefix + ": Branch master exists but is not checked out. "
                                    + "Please check it out yourself before building.")
                        }
                    }
                }
            }
        }

        println(msgPrefix + libPrefix + ": Enabling composite build.")
        includeBuild(libPath)
    }
}